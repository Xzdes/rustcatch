name: Prebuilds

# Запускать этот воркфлоу, когда на GitHub создается новый "Релиз"
on:
  release:
    types: [created]

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Определяем комбинации ОС и архитектур для сборки
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin # Для Intel Mac
          - os: macos-latest
            target: aarch64-apple-darwin # Для M1/M2 Mac

    steps:
      # 1. Скачиваем наш код из репозитория
      - uses: actions/checkout@v4

      # 2. Устанавливаем Rust
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # 3. Устанавливаем Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      # 4. Устанавливаем системные зависимости (только для Linux)
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxdo-dev libxtst-dev libx11-dev libxkbcommon-dev libxkbcommon-x11-dev

      # 5. Устанавливаем JS зависимости
      - name: Install dependencies
        run: npm install

      # 6. Компилируем наш Rust-код
      - name: Build and package
        # Запускаем скрипт, который мы создали в package.json
        run: npm run build -- --target=${{ matrix.target }}

      # 7. Упаковываем результат в .tar.gz архив
      - name: Create tarball
        run: |
          npm install -g prebuild
          prebuild -t ${{ matrix.target }} --strip

      # 8. Загружаем архив в наш Релиз на GitHub
      - name: Upload to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./prebuilds/${{ matrix.package_name }}
          asset_name: ${{ matrix.package_name }}
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}